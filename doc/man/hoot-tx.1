.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.13.
.TH HOOT-TX "1" "January 2025" "hoot-tx v1.3.0" "User Commands"
.SH NAME
hoot-tx  manual page for hoot-tx v1.3.0
.SH SYNOPSIS
.B hoot-tx
[\fI\,options\/\fR] \fI\,<hex-tx> \/\fR[\fI\,commands\/\fR]  \fI\,Update hex-encoded hoot transaction\/\fR
.br
.B hoot-tx
[\fI\,options\/\fR] \fI\,-create \/\fR[\fI\,commands\/\fR]   \fI\,Create hex-encoded hoot transaction\/\fR
.SH DESCRIPTION
Hootchain Core hoottx utility version v1.3.0
.SH OPTIONS
.HP
?
.IP
Print this help message and exit
.HP
\fBcreate\fR
.IP
Create new, empty TX.
.HP
\fBjson\fR
.IP
Select JSON output
.HP
\fBtxid\fR
.IP
Output only the hexencoded transaction id of the resultant transaction.
.HP
\fBversion\fR
.IP
Print version and exit
.PP
Chain selection options:
.HP
\fBchain=\fR<chain>
.IP
Use the chain <chain> (default: main). Allowed values: main, test,
regtest
.HP
\fBdevnet=\fR<name>
.IP
Use devnet chain with provided name
.HP
\fBhighsubsidyblocks=\fR<n>
.IP
The number of blocks with a higher than normal subsidy to mine at the
start of a chain. Block after that height will have fixed subsidy
base. (default: 0, devnetonly)
.HP
\fBhighsubsidyfactor=\fR<n>
.IP
The factor to multiply the normal block subsidy by while in the
highsubsidyblocks window of a chain (default: 1, devnetonly)
.HP
\fBllmqchainlocks=\fR<quorum name>
.IP
Override the default LLMQ type used for ChainLocks. Allows using
ChainLocks with smaller LLMQs. (default: llmq_devnet,
devnetonly)
.HP
\fBllmqdevnetparams=\fR<size>:<threshold>
.IP
Override the default LLMQ size for the LLMQ_DEVNET quorum (default: 3:2,
devnetonly)
.HP
\fBllmqinstantsenddip0024=\fR<quorum name>
.IP
Override the default LLMQ type used for InstantSendDIP0024. (default:
llmq_devnet_dip0024, devnetonly)
.HP
\fBllmqmnhf=\fR<quorum name>
.IP
Override the default LLMQ type used for EHF. (default: llmq_devnet,
devnetonly)
.HP
\fBllmqplatform=\fR<quorum name>
.IP
Override the default LLMQ type used for Platform. (default:
llmq_devnet_platform, devnetonly)
.HP
\fBminimumdifficultyblocks=\fR<n>
.IP
The number of blocks that can be mined with the minimum difficulty at
the start of a chain (default: 0, devnetonly)
.HP
\fBpowtargetspacing=\fR<n>
.IP
Override the default PowTargetSpacing value in seconds (default: 2.5
minutes, devnetonly)
.HP
\fBtestnet\fR
.IP
Use the test chain. Equivalent to \fBchain\fR=\fI\,test\/\fR
.PP
Commands:
.IP
delin=N
.IP
Delete input N from TX
.IP
delout=N
.IP
Delete output N from TX
.IP
in=TXID:VOUT(:SEQUENCE_NUMBER)
.IP
Add input to TX
.IP
locktime=N
.IP
Set TX lock time to N
.IP
nversion=N
.IP
Set TX version to N
.IP
outaddr=VALUE:ADDRESS
.IP
Add addressbased output to TX
.IP
outdata=[VALUE:]DATA
.IP
Add databased output to TX
.IP
outmultisig=VALUE:REQUIRED:PUBKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]
.IP
Add Pay To nofm Multisig output to TX. n = REQUIRED, m = PUBKEYS.
Optionally add the "S" flag to wrap the output in a
paytoscripthash.
.IP
outpubkey=VALUE:PUBKEY[:FLAGS]
.IP
Add paytopubkey output to TX. Optionally add the "S" flag to wrap the
output in a paytoscripthash.
.IP
outscript=VALUE:SCRIPT[:FLAGS]
.IP
Add raw script output to TX. Optionally add the "S" flag to wrap the
output in a paytoscripthash.
.IP
sign=SIGHASHFLAGS
.IP
Add zero or more signatures to transaction. This command requires JSON
registers:prevtxs=JSON object, privatekeys=JSON object. See
signrawtransactionwithkey docs for format of sighash flags, JSON
objects.
.PP
Register Commands:
.IP
load=NAME:FILENAME
.IP
Load JSON file FILENAME into register NAME
.IP
set=NAME:JSONSTRING
.IP
Set register NAME to given JSONSTRING
